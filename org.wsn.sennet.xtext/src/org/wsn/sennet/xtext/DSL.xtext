// automatically generated by Xtext
grammar org.wsn.sennet.xtext.DSL with org.eclipse.xtext.common.Terminals

import "http://www.wsn.org/sennet" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.wsn.org/sennet/enums" as enums

SeNetApp returns SeNetApp:
	{SeNetApp}
	'SeNetApp'
	name=EString
	'{'
		('id' id=EInt)?
		('jobs' '{' jobs+=AbstractJob ( "," jobs+=AbstractJob)* '}' )?
	'}';

AbstractJob returns AbstractJob:
	NodeLevelJob | SenseNowJob | SinkJob | SenseJob | NetworkLevelSpecialAlgorithm | NetworkDataProcessing;

AbstractNode returns AbstractNode:
	SensorNode | ClusterHeadNode | SinkNode | ComputationNode;

AbstractNetwork returns AbstractNetwork:
	FlatNetwork | ClusteredNetwork;

AbstractStartEndingJobTrigger returns AbstractStartEndingJobTrigger:
	ReceiveMessageTrigger | RecieveSerialMsgTrigger | StartJobTrigger_Impl | StopJobTrigger_Impl | PushButtomTrigger;

AbstratAction returns AbstratAction:
	ReadNodeMemoryAction | WriteNodeMemoryAction | SendMessageAction | BlinkAction | SendSerialPortMsgAction;

AbstractSensor returns AbstractSensor:
	AccelerometerSensor | LightSensor | LocationSensor | MicrophoneSensor | TemperatureSensor | PressureSensor | HumiditySensor | VoltageSensor;


AbstractFlatNode returns AbstractFlatNode:
	SensorNode | ComputationNode;


AbstractClusterNode returns AbstractClusterNode:
	SensorNode | ClusterHeadNode;


EInt returns ecore::EInt:
	'-'? INT;

EString returns ecore::EString:
	STRING | ID;

NodeLevelJob returns NodeLevelJob:
	{NodeLevelJob}
	'NodeLevelJob'
	'{'
		('id' id=EInt)?
		('nodeDataProcessing' nodeDataProcessing=Aggregation)?
		('sensingSamplingRate' sensingSamplingRate=ELong)?
		('dataProcessingRate' dataProcessingRate=ELong)?
		('JobTargetNode' JobTargetNode=AbstractNode)?
		('JobTargetNetwork' JobTargetNetwork=AbstractNetwork)?
		('startEndTrigger' '{' startEndTrigger+=AbstractStartEndingJobTrigger ( "," startEndTrigger+=AbstractStartEndingJobTrigger)* '}' )?
		('jobaction' '{' jobaction+=AbstratAction ( "," jobaction+=AbstratAction)* '}' )?
	'}';

SenseNowJob returns SenseNowJob:
	{SenseNowJob}
	'SenseNowJob'
	'{'
		('id' id=EInt)?
		('JobTargetNode' JobTargetNode=AbstractNode)?
		('JobTargetNetwork' JobTargetNetwork=AbstractNetwork)?
		('startEndTrigger' '{' startEndTrigger+=AbstractStartEndingJobTrigger ( "," startEndTrigger+=AbstractStartEndingJobTrigger)* '}' )?
		('jobaction' '{' jobaction+=AbstratAction ( "," jobaction+=AbstratAction)* '}' )?
	'}';

SinkJob returns SinkJob:
	{SinkJob}
	'SinkJob'
	'{'
		('id' id=EInt)?
		('JobTargetNode' JobTargetNode=AbstractNode)?
		('JobTargetNetwork' JobTargetNetwork=AbstractNetwork)?
		('startEndTrigger' '{' startEndTrigger+=AbstractStartEndingJobTrigger ( "," startEndTrigger+=AbstractStartEndingJobTrigger)* '}' )?
		('jobaction' '{' jobaction+=AbstratAction ( "," jobaction+=AbstratAction)* '}' )?
	'}';

SenseJob returns SenseJob:
	{SenseJob}
	'SenseJob'
	'{'
		('id' id=EInt)?
		('sensingSamplingRate' sensingSamplingRate=ELong)?
		('JobTargetNode' JobTargetNode=AbstractNode)?
		('JobTargetNetwork' JobTargetNetwork=AbstractNetwork)?
		('startEndTrigger' '{' startEndTrigger+=AbstractStartEndingJobTrigger ( "," startEndTrigger+=AbstractStartEndingJobTrigger)* '}' )?
		('jobaction' '{' jobaction+=AbstratAction ( "," jobaction+=AbstratAction)* '}' )?
	'}';

NetworkLevelSpecialAlgorithm returns NetworkLevelSpecialAlgorithm:
	{NetworkLevelSpecialAlgorithm}
	'NetworkLevelSpecialAlgorithm'
	'{'
		('id' id=EInt)?
		('specialAlgorithmJob' specialAlgorithmJob=Fusion)?
		('sensingSamplingRate' sensingSamplingRate=ELong)?
		('algorithmSamplingRate' algorithmSamplingRate=ELong)?
		('nodeIDList' '{' nodeIDList+=EInt ( "," nodeIDList+=EInt)* '}' )?
		('JobTargetNode' JobTargetNode=AbstractNode)?
		('JobTargetNetwork' JobTargetNetwork=AbstractNetwork)?
		('startEndTrigger' '{' startEndTrigger+=AbstractStartEndingJobTrigger ( "," startEndTrigger+=AbstractStartEndingJobTrigger)* '}' )?
		('jobaction' '{' jobaction+=AbstratAction ( "," jobaction+=AbstratAction)* '}' )?
	'}';

NetworkDataProcessing returns NetworkDataProcessing:
	{NetworkDataProcessing}
	'NetworkDataProcessing'
	'{'
		('id' id=EInt)?
		('networkDataProcessing' networkDataProcessing=Aggregation)?
		('sensingSamplingRate' sensingSamplingRate=ELong)?
		('dataProcessingRate' dataProcessingRate=ELong)?
		('nodeIDList' '{' nodeIDList+=EInt ( "," nodeIDList+=EInt)* '}' )?
		('JobTargetNode' JobTargetNode=AbstractNode)?
		('JobTargetNetwork' JobTargetNetwork=AbstractNetwork)?
		('startEndTrigger' '{' startEndTrigger+=AbstractStartEndingJobTrigger ( "," startEndTrigger+=AbstractStartEndingJobTrigger)* '}' )?
		('jobaction' '{' jobaction+=AbstratAction ( "," jobaction+=AbstratAction)* '}' )?
	'}';

enum Position returns enums::Position:
				mobile = 'mobile' | static = 'static';

SensorNode returns SensorNode:
	{SensorNode}
	'SensorNode'
	'{'
		('id' id=EInt)?
		('position' position=Position)?
		('nodeResources' '{' nodeResources+=AbstractSensor ( "," nodeResources+=AbstractSensor)* '}' )?
	'}';

ClusterHeadNode returns ClusterHeadNode:
	{ClusterHeadNode}
	'ClusterHeadNode'
	'{'
		('id' id=EInt)?
		('position' position=Position)?
		('nodeResources' '{' nodeResources+=AbstractSensor ( "," nodeResources+=AbstractSensor)* '}' )?
	'}';

SinkNode returns SinkNode:
	{SinkNode}
	'SinkNode'
	'{'
		('id' id=EInt)?
		('position' position=Position)?
		('nodeResources' '{' nodeResources+=AbstractSensor ( "," nodeResources+=AbstractSensor)* '}' )?
	'}';

ComputationNode returns ComputationNode:
	{ComputationNode}
	'ComputationNode'
	'{'
		('id' id=EInt)?
		('position' position=Position)?
		('nodeResources' '{' nodeResources+=AbstractSensor ( "," nodeResources+=AbstractSensor)* '}' )?
	'}';

AccelerometerSensor returns AccelerometerSensor:
	{AccelerometerSensor}
	'AccelerometerSensor'
	;

LightSensor returns LightSensor:
	{LightSensor}
	'LightSensor'
	;

LocationSensor returns LocationSensor:
	{LocationSensor}
	'LocationSensor'
	;

MicrophoneSensor returns MicrophoneSensor:
	{MicrophoneSensor}
	'MicrophoneSensor'
	;

TemperatureSensor returns TemperatureSensor:
	{TemperatureSensor}
	'TemperatureSensor'
	;

PressureSensor returns PressureSensor:
	{PressureSensor}
	'PressureSensor'
	;

HumiditySensor returns HumiditySensor:
	{HumiditySensor}
	'HumiditySensor'
	;

VoltageSensor returns VoltageSensor:
	{VoltageSensor}
	'VoltageSensor'
	;

enum InterNodeComm returns enums::InterNodeComm:
				BT = 'BT' | Zigbee = 'Zigbee' | WLan = 'WLan' | RF = 'RF';

enum RoutingProtocol returns enums::RoutingProtocol:
				leach = 'leach' | lqrp = 'lqrp' | spin = 'spin' | aodv = 'aodv' | dodv = 'dodv' | dsr = 'dsr' | dsdv = 'dsdv' | gsr = 'gsr' | heed = 'heed' | gaf = 'gaf' | gear = 'gear' | tbf = 'tbf' | ead = 'ead' | pegasis = 'pegasis' | teen = 'teen' | speed = 'speed' | ctp = 'ctp' | dismentation = 'dismentation' | activeMessage = 'activeMessage';

FlatNetwork returns FlatNetwork:
	{FlatNetwork}
	'FlatNetwork'
	'{'
		('id' id=EInt)?
		('nbOfNodes' nbOfNodes=EInt)?
		('interNodeComm' interNodeComm=InterNodeComm)?
		('routingProtocol' routingProtocol=RoutingProtocol)?
		('resources' '{' resources+=AbstractSensor ( "," resources+=AbstractSensor)* '}' )?
		('sink' sink=SinkNode)?
		('nodes' '{' nodes+=AbstractFlatNode ( "," nodes+=AbstractFlatNode)* '}' )?
	'}';

ClusteredNetwork returns ClusteredNetwork:
	{ClusteredNetwork}
	'ClusteredNetwork'
	'{'
		('id' id=EInt)?
		('nbOfNodes' nbOfNodes=EInt)?
		('interNodeComm' interNodeComm=InterNodeComm)?
		('routingProtocol' routingProtocol=RoutingProtocol)?
		('resources' '{' resources+=AbstractSensor ( "," resources+=AbstractSensor)* '}' )?
		('sink' sink=SinkNode)?
		('clusters' '{' clusters+=Cluster ( "," clusters+=Cluster)* '}' )?
	'}';

Cluster returns Cluster:
	{Cluster}
	'Cluster'
	'{'
		('id' id=EInt)?
		('resources' '(' resources+=[AbstractSensor|EString] ( "," resources+=[AbstractSensor|EString])* ')' )?
		('nodes' '{' nodes+=AbstractClusterNode ( "," nodes+=AbstractClusterNode)* '}' )?
	'}';

ReceiveMessageTrigger returns ReceiveMessageTrigger:
	{ReceiveMessageTrigger}
	'ReceiveMessageTrigger'
	;

RecieveSerialMsgTrigger returns RecieveSerialMsgTrigger:
	{RecieveSerialMsgTrigger}
	'RecieveSerialMsgTrigger'
	;

StartJobTrigger_Impl returns StartJobTrigger:
	{StartJobTrigger}
	'StartJobTrigger'
	;

StopJobTrigger_Impl returns StopJobTrigger:
	{StopJobTrigger}
	'StopJobTrigger'
	;

PushButtomTrigger returns PushButtomTrigger:
	{PushButtomTrigger}
	'PushButtomTrigger'
	;

ConditionalAction returns ConditionalAction:
	{ConditionalAction}
	'ConditionalAction'
	'{'
		('sensorTerm' sensorTerm=EString)?
		('logicalSymbol' logicalSymbol=LogicalSymbol)?
		('value' value=ELong)?
		('unit' unit=EString)?
	'}';

ReadNodeMemoryAction returns ReadNodeMemoryAction:
	{ReadNodeMemoryAction}
	'ReadNodeMemoryAction'
	'{'
		('condition' condition=ConditionalAction)?
	'}';

WriteNodeMemoryAction returns WriteNodeMemoryAction:
	{WriteNodeMemoryAction}
	'WriteNodeMemoryAction'
	'{'
		('condition' condition=ConditionalAction)?
	'}';

SendMessageAction returns SendMessageAction:
	{SendMessageAction}
	'SendMessageAction'
	'{'
		('sendMessageTo' sendMessageTo=EInt)?
		('condition' condition=ConditionalAction)?
	'}';

BlinkAction returns BlinkAction:
	{BlinkAction}
	'BlinkAction'
	'{'
		('led' led=Leds)?
		('status' status=LedStatus)?
		('condition' condition=ConditionalAction)?
	'}';

SendSerialPortMsgAction returns SendSerialPortMsgAction:
	{SendSerialPortMsgAction}
	'SendSerialPortMsgAction'
	'{'
		('condition' condition=ConditionalAction)?
	'}';

enum LogicalSymbol returns enums::LogicalSymbol:
				equal = 'equal' | greaterThan = 'greaterThan' | greaterOrEqualThan = 'greaterOrEqualThan' | lessThan = 'lessThan' | lessOrEqualThan = 'lessOrEqualThan' | notEqual = 'notEqual';

ELong returns ecore::ELong:
	'-'? INT;

enum Leds returns enums::Leds:
				led0 = 'led0' | led1 = 'led1' | led2 = 'led2';

enum LedStatus returns enums::LedStatus:
				on = 'on' | off = 'off' | toggle = 'toggle';

enum Aggregation returns enums::Aggregation:
				compression = 'compression' | max = 'max' | min = 'min' | avg = 'avg' | count = 'count';

enum Fusion returns enums::Fusion:
				classification = 'classification' | event_detection = 'event_detection' | tracking = 'tracking' | decision_making = 'decision_making';
