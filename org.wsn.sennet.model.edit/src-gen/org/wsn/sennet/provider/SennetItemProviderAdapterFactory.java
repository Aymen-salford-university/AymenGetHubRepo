/**
 */
package org.wsn.sennet.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.wsn.sennet.util.SennetAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SennetItemProviderAdapterFactory extends SennetAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SennetItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.SeNetApp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SeNetAppItemProvider seNetAppItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.SeNetApp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSeNetAppAdapter() {
		if (seNetAppItemProvider == null) {
			seNetAppItemProvider = new SeNetAppItemProvider(this);
		}

		return seNetAppItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.SensorNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorNodeItemProvider sensorNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.SensorNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorNodeAdapter() {
		if (sensorNodeItemProvider == null) {
			sensorNodeItemProvider = new SensorNodeItemProvider(this);
		}

		return sensorNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.ClusterHeadNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusterHeadNodeItemProvider clusterHeadNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.ClusterHeadNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusterHeadNodeAdapter() {
		if (clusterHeadNodeItemProvider == null) {
			clusterHeadNodeItemProvider = new ClusterHeadNodeItemProvider(this);
		}

		return clusterHeadNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.SinkNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SinkNodeItemProvider sinkNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.SinkNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSinkNodeAdapter() {
		if (sinkNodeItemProvider == null) {
			sinkNodeItemProvider = new SinkNodeItemProvider(this);
		}

		return sinkNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.ComputationNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputationNodeItemProvider computationNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.ComputationNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputationNodeAdapter() {
		if (computationNodeItemProvider == null) {
			computationNodeItemProvider = new ComputationNodeItemProvider(this);
		}

		return computationNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.FlatNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlatNetworkItemProvider flatNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.FlatNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlatNetworkAdapter() {
		if (flatNetworkItemProvider == null) {
			flatNetworkItemProvider = new FlatNetworkItemProvider(this);
		}

		return flatNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.ClusteredNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusteredNetworkItemProvider clusteredNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.ClusteredNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusteredNetworkAdapter() {
		if (clusteredNetworkItemProvider == null) {
			clusteredNetworkItemProvider = new ClusteredNetworkItemProvider(this);
		}

		return clusteredNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.Cluster} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusterItemProvider clusterItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.Cluster}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusterAdapter() {
		if (clusterItemProvider == null) {
			clusterItemProvider = new ClusterItemProvider(this);
		}

		return clusterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.NodeLevelJob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeLevelJobItemProvider nodeLevelJobItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.NodeLevelJob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeLevelJobAdapter() {
		if (nodeLevelJobItemProvider == null) {
			nodeLevelJobItemProvider = new NodeLevelJobItemProvider(this);
		}

		return nodeLevelJobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.SenseNowJob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SenseNowJobItemProvider senseNowJobItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.SenseNowJob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSenseNowJobAdapter() {
		if (senseNowJobItemProvider == null) {
			senseNowJobItemProvider = new SenseNowJobItemProvider(this);
		}

		return senseNowJobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.SinkJob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SinkJobItemProvider sinkJobItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.SinkJob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSinkJobAdapter() {
		if (sinkJobItemProvider == null) {
			sinkJobItemProvider = new SinkJobItemProvider(this);
		}

		return sinkJobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.SenseJob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SenseJobItemProvider senseJobItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.SenseJob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSenseJobAdapter() {
		if (senseJobItemProvider == null) {
			senseJobItemProvider = new SenseJobItemProvider(this);
		}

		return senseJobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.ReceiveMessageTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReceiveMessageTriggerItemProvider receiveMessageTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.ReceiveMessageTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReceiveMessageTriggerAdapter() {
		if (receiveMessageTriggerItemProvider == null) {
			receiveMessageTriggerItemProvider = new ReceiveMessageTriggerItemProvider(this);
		}

		return receiveMessageTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.RecieveSerialMsgTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecieveSerialMsgTriggerItemProvider recieveSerialMsgTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.RecieveSerialMsgTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecieveSerialMsgTriggerAdapter() {
		if (recieveSerialMsgTriggerItemProvider == null) {
			recieveSerialMsgTriggerItemProvider = new RecieveSerialMsgTriggerItemProvider(this);
		}

		return recieveSerialMsgTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.StartJobTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartJobTriggerItemProvider startJobTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.StartJobTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartJobTriggerAdapter() {
		if (startJobTriggerItemProvider == null) {
			startJobTriggerItemProvider = new StartJobTriggerItemProvider(this);
		}

		return startJobTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.StopJobTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopJobTriggerItemProvider stopJobTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.StopJobTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopJobTriggerAdapter() {
		if (stopJobTriggerItemProvider == null) {
			stopJobTriggerItemProvider = new StopJobTriggerItemProvider(this);
		}

		return stopJobTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.PushButtomTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PushButtomTriggerItemProvider pushButtomTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.PushButtomTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPushButtomTriggerAdapter() {
		if (pushButtomTriggerItemProvider == null) {
			pushButtomTriggerItemProvider = new PushButtomTriggerItemProvider(this);
		}

		return pushButtomTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.ConditionalAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalActionItemProvider conditionalActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.ConditionalAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalActionAdapter() {
		if (conditionalActionItemProvider == null) {
			conditionalActionItemProvider = new ConditionalActionItemProvider(this);
		}

		return conditionalActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.ReadNodeMemoryAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReadNodeMemoryActionItemProvider readNodeMemoryActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.ReadNodeMemoryAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReadNodeMemoryActionAdapter() {
		if (readNodeMemoryActionItemProvider == null) {
			readNodeMemoryActionItemProvider = new ReadNodeMemoryActionItemProvider(this);
		}

		return readNodeMemoryActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.WriteNodeMemoryAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WriteNodeMemoryActionItemProvider writeNodeMemoryActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.WriteNodeMemoryAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWriteNodeMemoryActionAdapter() {
		if (writeNodeMemoryActionItemProvider == null) {
			writeNodeMemoryActionItemProvider = new WriteNodeMemoryActionItemProvider(this);
		}

		return writeNodeMemoryActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.SendMessageAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendMessageActionItemProvider sendMessageActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.SendMessageAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendMessageActionAdapter() {
		if (sendMessageActionItemProvider == null) {
			sendMessageActionItemProvider = new SendMessageActionItemProvider(this);
		}

		return sendMessageActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.BlinkAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlinkActionItemProvider blinkActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.BlinkAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlinkActionAdapter() {
		if (blinkActionItemProvider == null) {
			blinkActionItemProvider = new BlinkActionItemProvider(this);
		}

		return blinkActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.SendSerialPortMsgAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendSerialPortMsgActionItemProvider sendSerialPortMsgActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.SendSerialPortMsgAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendSerialPortMsgActionAdapter() {
		if (sendSerialPortMsgActionItemProvider == null) {
			sendSerialPortMsgActionItemProvider = new SendSerialPortMsgActionItemProvider(this);
		}

		return sendSerialPortMsgActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.AccelerometerSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccelerometerSensorItemProvider accelerometerSensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.AccelerometerSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccelerometerSensorAdapter() {
		if (accelerometerSensorItemProvider == null) {
			accelerometerSensorItemProvider = new AccelerometerSensorItemProvider(this);
		}

		return accelerometerSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.LightSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightSensorItemProvider lightSensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.LightSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightSensorAdapter() {
		if (lightSensorItemProvider == null) {
			lightSensorItemProvider = new LightSensorItemProvider(this);
		}

		return lightSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.LocationSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationSensorItemProvider locationSensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.LocationSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationSensorAdapter() {
		if (locationSensorItemProvider == null) {
			locationSensorItemProvider = new LocationSensorItemProvider(this);
		}

		return locationSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.MicrophoneSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicrophoneSensorItemProvider microphoneSensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.MicrophoneSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicrophoneSensorAdapter() {
		if (microphoneSensorItemProvider == null) {
			microphoneSensorItemProvider = new MicrophoneSensorItemProvider(this);
		}

		return microphoneSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.TemperatureSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemperatureSensorItemProvider temperatureSensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.TemperatureSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemperatureSensorAdapter() {
		if (temperatureSensorItemProvider == null) {
			temperatureSensorItemProvider = new TemperatureSensorItemProvider(this);
		}

		return temperatureSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.PressureSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PressureSensorItemProvider pressureSensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.PressureSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPressureSensorAdapter() {
		if (pressureSensorItemProvider == null) {
			pressureSensorItemProvider = new PressureSensorItemProvider(this);
		}

		return pressureSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.HumiditySensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HumiditySensorItemProvider humiditySensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.HumiditySensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHumiditySensorAdapter() {
		if (humiditySensorItemProvider == null) {
			humiditySensorItemProvider = new HumiditySensorItemProvider(this);
		}

		return humiditySensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.VoltageSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VoltageSensorItemProvider voltageSensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.VoltageSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVoltageSensorAdapter() {
		if (voltageSensorItemProvider == null) {
			voltageSensorItemProvider = new VoltageSensorItemProvider(this);
		}

		return voltageSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.NetworkLevelSpecialAlgorithm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkLevelSpecialAlgorithmItemProvider networkLevelSpecialAlgorithmItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.NetworkLevelSpecialAlgorithm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkLevelSpecialAlgorithmAdapter() {
		if (networkLevelSpecialAlgorithmItemProvider == null) {
			networkLevelSpecialAlgorithmItemProvider = new NetworkLevelSpecialAlgorithmItemProvider(this);
		}

		return networkLevelSpecialAlgorithmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wsn.sennet.NetworkDataProcessing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkDataProcessingItemProvider networkDataProcessingItemProvider;

	/**
	 * This creates an adapter for a {@link org.wsn.sennet.NetworkDataProcessing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkDataProcessingAdapter() {
		if (networkDataProcessingItemProvider == null) {
			networkDataProcessingItemProvider = new NetworkDataProcessingItemProvider(this);
		}

		return networkDataProcessingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (seNetAppItemProvider != null) seNetAppItemProvider.dispose();
		if (sensorNodeItemProvider != null) sensorNodeItemProvider.dispose();
		if (clusterHeadNodeItemProvider != null) clusterHeadNodeItemProvider.dispose();
		if (sinkNodeItemProvider != null) sinkNodeItemProvider.dispose();
		if (computationNodeItemProvider != null) computationNodeItemProvider.dispose();
		if (flatNetworkItemProvider != null) flatNetworkItemProvider.dispose();
		if (clusteredNetworkItemProvider != null) clusteredNetworkItemProvider.dispose();
		if (clusterItemProvider != null) clusterItemProvider.dispose();
		if (nodeLevelJobItemProvider != null) nodeLevelJobItemProvider.dispose();
		if (senseNowJobItemProvider != null) senseNowJobItemProvider.dispose();
		if (sinkJobItemProvider != null) sinkJobItemProvider.dispose();
		if (senseJobItemProvider != null) senseJobItemProvider.dispose();
		if (receiveMessageTriggerItemProvider != null) receiveMessageTriggerItemProvider.dispose();
		if (recieveSerialMsgTriggerItemProvider != null) recieveSerialMsgTriggerItemProvider.dispose();
		if (startJobTriggerItemProvider != null) startJobTriggerItemProvider.dispose();
		if (stopJobTriggerItemProvider != null) stopJobTriggerItemProvider.dispose();
		if (pushButtomTriggerItemProvider != null) pushButtomTriggerItemProvider.dispose();
		if (conditionalActionItemProvider != null) conditionalActionItemProvider.dispose();
		if (readNodeMemoryActionItemProvider != null) readNodeMemoryActionItemProvider.dispose();
		if (writeNodeMemoryActionItemProvider != null) writeNodeMemoryActionItemProvider.dispose();
		if (sendMessageActionItemProvider != null) sendMessageActionItemProvider.dispose();
		if (blinkActionItemProvider != null) blinkActionItemProvider.dispose();
		if (sendSerialPortMsgActionItemProvider != null) sendSerialPortMsgActionItemProvider.dispose();
		if (accelerometerSensorItemProvider != null) accelerometerSensorItemProvider.dispose();
		if (lightSensorItemProvider != null) lightSensorItemProvider.dispose();
		if (locationSensorItemProvider != null) locationSensorItemProvider.dispose();
		if (microphoneSensorItemProvider != null) microphoneSensorItemProvider.dispose();
		if (temperatureSensorItemProvider != null) temperatureSensorItemProvider.dispose();
		if (pressureSensorItemProvider != null) pressureSensorItemProvider.dispose();
		if (humiditySensorItemProvider != null) humiditySensorItemProvider.dispose();
		if (voltageSensorItemProvider != null) voltageSensorItemProvider.dispose();
		if (networkLevelSpecialAlgorithmItemProvider != null) networkLevelSpecialAlgorithmItemProvider.dispose();
		if (networkDataProcessingItemProvider != null) networkDataProcessingItemProvider.dispose();
	}

}
